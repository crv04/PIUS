import psycopg2
import requests
import time
import logging
from telegram.error import NetworkError, TelegramError
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
DB_CONFIG = {
    "dbname": "steam_bot",
    "user": "postgres",
    "password": "",
    "host": "localhost",
    "port": "5432",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_RETRIES = 3
RETRY_DELAY = 5

def get_db_connection():
    return psycopg2.connect(**DB_CONFIG)


def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username VARCHAR(100),
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                registration_date TIMESTAMP DEFAULT NOW()
            )
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_games (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                game_url TEXT NOT NULL,
                game_name TEXT,
                last_discount INTEGER DEFAULT 0,
                discount_threshold INTEGER DEFAULT 0,
                subscription_date TIMESTAMP DEFAULT NOW(),
                CONSTRAINT unique_user_game UNIQUE (user_id, game_url)
            )
        """)
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()


async def set_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_user_games(update, context, mode="set_threshold")


async def handle_set_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: sub_123_50 ‚Üí –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ 123 —Å –ø–æ—Ä–æ–≥–æ–º 50%
    _, sub_id, threshold = query.data.split('_')

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "UPDATE user_games SET discount_threshold = %s WHERE id = %s RETURNING game_name",
            (int(threshold), int(sub_id))
        )
        game_name = cursor.fetchone()[0]
        conn.commit()
        await query.edit_message_text(
            f"‚úÖ –î–ª—è –∏–≥—Ä—ã ¬´{game_name}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–∫–∏–¥–∫–µ {threshold}% –∏–ª–∏ –±–æ–ª—å—à–µ"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞")
    finally:
        cursor.close()
        conn.close()

def get_game_name_from_url(game_url):
    if not game_url:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞"
    parts = game_url.strip("/").split("/")
    raw_name = parts[-1]
    name = raw_name.replace("__", ": ").replace("_", " ")
    if name.split()[-1].isdigit():
        name = " ".join(name.split()[:-1])
    return name


def extract_app_id(game_url):
    if 'app/' in game_url:
        return game_url.split('app/')[1].split('/')[0]
    return None


def get_steam_game_price(app_id):
    url = f"https://store.steampowered.com/api/appdetails?appids={app_id}&cc=ru"
    response = requests.get(url)
    data = response.json()

    if not data.get(str(app_id), {}).get("success"):
        return None

    game_data = data[str(app_id)]["data"]
    if not game_data.get("price_overview"):
        return None

    price_data = game_data["price_overview"]
    return {
        "original": price_data.get("initial", price_data["final"]) / 100,
        "final": price_data["final"] / 100,
        "discount": price_data.get("discount_percent", 0),
        "currency": price_data["currency"]
    }


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (user_id) DO NOTHING
            """,
            (user.id, user.username, user.first_name, user.last_name),
        )
        conn.commit()

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        support_button = InlineKeyboardButton(
            text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            url="https://t.me/bigfloppa232"
        )
        reply_markup = InlineKeyboardMarkup([[support_button]])

        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –≤ Steam, –∏ —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ —Å–∫–∏–¥–∫–∞—Ö.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/mysubs - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã",
             reply_markup = reply_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    finally:
        cursor.close()
        conn.close()


async def handle_game_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    game_url = update.message.text
    if "store.steampowered.com" not in game_url:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –≤ Steam.")
        return

    game_name = get_game_name_from_url(game_url)
    context.user_data['pending_game'] = {
        'url': game_url,
        'name': game_name
    }

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="confirm_subscribe"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_subscribe")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã?\n"
        f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{game_name}</b>\n"
        f"üîó –°—Å—ã–ª–∫–∞: {game_url}",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def handle_subscription_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_subscribe":
        await query.edit_message_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        if 'pending_game' in context.user_data:
            del context.user_data['pending_game']
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    game_data = context.user_data.get('pending_game')
    if not game_data:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    user = query.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
        cursor.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (user_id) DO NOTHING
            """,
            (user.id, user.username, user.first_name, user.last_name),
        )

        cursor.execute(
            """
            INSERT INTO user_games (user_id, game_url, game_name)
            VALUES (%s, %s, %s)
            ON CONFLICT ON CONSTRAINT unique_user_game DO NOTHING
            RETURNING id
            """,
            (user.id, game_data['url'], game_data['name']),
        )

        result = cursor.fetchone()
        if result:
            sub_id = result[0]
            conn.commit()

            # –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏
            keyboard = [
                [InlineKeyboardButton(f"{i}%", callback_data=f"thres_{sub_id}_{i}")]
                for i in range(10, 101, 10)
            ]
            keyboard.append([InlineKeyboardButton("–õ—é–±–∞—è —Å–∫–∏–¥–∫–∞", callback_data=f"thres_{sub_id}_0")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"üéÆ –ò–≥—Ä–∞: <b>{game_data['name']}</b>\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏:\n"
                "(–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø—Ä–∏ —Å–∫–∏–¥–∫–µ ‚â• –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(f"‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ ¬´{game_data['name']}¬ª")
            conn.commit()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()
        if 'pending_game' in context.user_data:
            del context.user_data['pending_game']


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    game_url = context.user_data.get('pending_game_url')

    if not game_url:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
        cursor.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (user_id) DO NOTHING
            """,
            (user.id, user.username, user.first_name, user.last_name),
        )

        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        game_name = get_game_name_from_url(game_url)
        cursor.execute(
            """
            INSERT INTO user_games (user_id, game_url, game_name, discount_threshold)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT ON CONSTRAINT unique_user_game 
            DO UPDATE SET game_name = EXCLUDED.game_name
            RETURNING id
            """,
            (user.id, game_url, game_name, 0),  # 0 - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        )

        result = cursor.fetchone()
        if result:
            sub_id = result[0]
            conn.commit()

            # 3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏
            keyboard = [
                [InlineKeyboardButton(f"{i}%", callback_data=f"thres_{sub_id}_{i}")]
                for i in range(10, 101, 10)  # –í–∞—Ä–∏–∞–Ω—Ç—ã 10%, 20%, ..., 100%
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (—É–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –ª—é–±–æ–π —Å–∫–∏–¥–∫–µ)
            keyboard.append([InlineKeyboardButton("–õ—é–±–∞—è —Å–∫–∏–¥–∫–∞", callback_data=f"thres_{sub_id}_0")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏ –¥–ª—è ¬´{game_name}¬ª:\n"
                "(–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø—Ä–∏ —Å–∫–∏–¥–∫–µ ‚â• –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–õ—é–±–∞—è —Å–∫–∏–¥–∫–∞¬ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Å–µ—Ö —Å–∫–∏–¥–∫–∞—Ö",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ ¬´{game_name}¬ª")
            conn.commit()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()
        if 'pending_game_url' in context.user_data:
            del context.user_data['pending_game_url']


async def my_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """
            SELECT game_url, game_name FROM user_games 
            WHERE user_id = %s
            ORDER BY subscription_date DESC
            """,
            (user.id,),
        )
        games = cursor.fetchall()

        if not games:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç
            support_button = InlineKeyboardButton(
                text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                url="https://t.me/bigfloppa232"
            )
            reply_markup = InlineKeyboardMarkup([[support_button]])
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
                reply_markup=reply_markup
            )
            return

        message = "üéÆ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        for game_url, game_name in games:
            app_id = extract_app_id(game_url)
            price_info = get_steam_game_price(app_id) if app_id else None

            if price_info:
                if price_info["discount"] > 0:
                    message += (
                        f"üîπ <b>{game_name}</b>\n"
                        f"   üí∞ <s>{price_info['original']} {price_info['currency']}</s> ‚Üí "
                        f"<b>{price_info['final']} {price_info['currency']}</b>\n"
                        f"   üéØ –°–∫–∏–¥–∫–∞: {price_info['discount']}%\n"
                        f"   üîó {game_url}\n\n"
                    )
                else:
                    message += (
                        f"üîπ <b>{game_name}</b>\n"
                        f"   üí∞ {price_info['final']} {price_info['currency']} (–±–µ–∑ —Å–∫–∏–¥–∫–∏)\n"
                        f"   üîó {game_url}\n\n"
                    )
            else:
                message += f"üîπ {game_name}\n   üîó {game_url}\n\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        support_button = InlineKeyboardButton(
            text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            url="https://t.me/bigfloppa232"
        )
        reply_markup = InlineKeyboardMarkup([[support_button]])

        await update.message.reply_text(message, parse_mode="HTML", disable_web_page_preview=True, reply_markup=reply_markup)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        cursor.close()
        conn.close()


async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_user_games(update, context, mode="unsubscribe")


async def show_user_games(update: Update, context: ContextTypes.DEFAULT_TYPE, mode="list"):
    user = update.message.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """
            SELECT id, game_name FROM user_games 
            WHERE user_id = %s
            ORDER BY subscription_date DESC
            """,
            (user.id,),
        )
        games = cursor.fetchall()
        if not games:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            return
        if mode == "list":
            response = "üéÆ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" + "\n".join(
                f"{idx + 1}. {name}" for idx, (_, name) in enumerate(games)
            )
            await update.message.reply_text(response)
        elif mode == "unsubscribe":
            keyboard = [
                [InlineKeyboardButton(name, callback_data=f"unsub_{id}")]
                for id, name in games
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
                reply_markup=reply_markup,
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    finally:
        cursor.close()
        conn.close()


async def handle_unsubscribe_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    sub_id = int(query.data.split("_")[1])
    user = query.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """
            DELETE FROM user_games 
            WHERE id = %s AND user_id = %s
            RETURNING game_name
            """,
            (sub_id, user.id),
        )
        deleted = cursor.fetchone()
        if deleted:
            conn.commit()
            await query.edit_message_text(f"‚ùå –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç ¬´{deleted[0]}¬ª.")
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
    finally:
        cursor.close()
        conn.close()


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'pending_game_url' in context.user_data:
        del context.user_data['pending_game_url']
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update and hasattr(update, 'effective_message'):
        text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await safe_send_message(update.effective_message, text)
async def safe_send_message(message, text, reply_markup=None, parse_mode=None, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
    """
    for attempt in range(MAX_RETRIES):
        try:
            await message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                **kwargs
            )
            return True
        except NetworkError as e:
            logger.warning(f"NetworkError (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES}): {e}")
            if attempt < MAX_RETRIES - 1:
                time.sleep(RETRY_DELAY)
            continue
        except TelegramError as e:
            logger.error(f"TelegramError: {e}")
            break
    return False

async def check_discounts(context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT ug.id, ug.user_id, ug.game_url, ug.game_name, 
                   ug.last_discount, ug.discount_threshold
            FROM user_games ug
            JOIN users u ON ug.user_id = u.user_id
        """)

        for sub_id, user_id, game_url, game_name, last_discount, threshold in cursor.fetchall():
            app_id = extract_app_id(game_url)
            if not app_id:
                continue

            price_info = get_steam_game_price(app_id)
            if not price_info:
                continue

            current_discount = price_info["discount"]

            if (current_discount != last_discount and current_discount >= threshold):
                message = (
                    f"üéâ <b>–°–∫–∏–¥–∫–∞ –Ω–∞ {game_name} –¥–æ—Å—Ç–∏–≥–ª–∞ –≤–∞—à–µ–≥–æ –ø–æ—Ä–æ–≥–∞ {threshold}%!</b>\n"
                    f"üí∞ <s>{price_info['original']} {price_info['currency']}</s> ‚Üí "
                    f"<b>{price_info['final']} {price_info['currency']}</b>\n"
                    f"üéØ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {current_discount}%\n"
                    f"üîó {game_url}"
                )

                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode="HTML"
                    )
                except NetworkError as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    continue

            cursor.execute(
                "UPDATE user_games SET last_discount = %s WHERE id = %s",
                (current_discount, sub_id),
            )
            conn.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–∏–¥–æ–∫: {e}")
    finally:
        cursor.close()
        conn.close()

def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")  # –ò —ç—Ç—É

    application = ApplicationBuilder() \
        .token("YOUR_TOKEN") \
        .post_init(lambda _: print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")) \
        .build()

    application = ApplicationBuilder().token("7517560971:AAHHa2d-9aWZFk9L1ROsvrpROx7Tm4qflhY").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("setthreshold", set_threshold))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(CommandHandler("mysubs", my_subs))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_game_url))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(
        CallbackQueryHandler(handle_subscription_confirmation, pattern="^(confirm_subscribe|cancel_subscribe)"))
    application.add_handler(CallbackQueryHandler(handle_set_threshold, pattern="^thres_"))
    application.add_handler(CallbackQueryHandler(handle_unsubscribe_button, pattern="^unsub_"))

    application.job_queue.run_repeating(check_discounts, interval=21600)

    application.run_polling()


if __name__ == "__main__":
    main()
