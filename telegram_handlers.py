import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes
)
from datetime import datetime
from database import get_db_connection
from steam_api import get_game_name_from_url, extract_app_id, get_steam_game_price
from utils import safe_send_message
from config import ADMIN_CHAT_ID

logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    if update and hasattr(update, 'effective_message'):
        await safe_send_message(
            context,
            update.effective_message.chat_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    await safe_send_message(context, ADMIN_CHAT_ID, f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{context.error}")

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
            (user.id, user.username, user.first_name, user.last_name))
        conn.commit()

        support_button = InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/bigfloppa232")
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –≤ Steam, –∏ —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ —Å–∫–∏–¥–∫–∞—Ö.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/mysubs - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã",
            reply_markup=InlineKeyboardMarkup([[support_button]]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    finally:
        cursor.close()
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL –∏–≥—Ä—ã
async def handle_game_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "store.steampowered.com" not in (game_url := update.message.text):
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –≤ Steam.")
        return

    game_name = get_game_name_from_url(game_url)
    context.user_data['pending_game'] = {'url': game_url, 'name': game_name}

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="confirm_subscribe"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_subscribe")]
    ]
    await update.message.reply_text(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã?\n"
        f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{game_name}</b>\nüîó –°—Å—ã–ª–∫–∞: {game_url}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (callback)
async def handle_subscription_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_subscribe":
        await query.edit_message_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        context.user_data.pop('pending_game', None)
        return

    if not (game_data := context.user_data.get('pending_game')):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    user = query.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
            (user.id, user.username, user.first_name, user.last_name))

        cursor.execute(
            """INSERT INTO user_games (user_id, game_url, game_name)
            VALUES (%s, %s, %s) ON CONFLICT ON CONSTRAINT unique_user_game DO NOTHING
            RETURNING id""",
            (user.id, game_data['url'], game_data['name']))

        if result := cursor.fetchone():
            sub_id = result[0]
            conn.commit()

            keyboard = [
                [InlineKeyboardButton(f"{i}%", callback_data=f"thres_{sub_id}_{i}")]
                for i in range(10, 101, 10)]
            keyboard.append([InlineKeyboardButton("–õ—é–±–∞—è —Å–∫–∏–¥–∫–∞", callback_data=f"thres_{sub_id}_0")])

            await query.edit_message_text(
                f"üéÆ –ò–≥—Ä–∞: <b>{game_data['name']}</b>\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏:\n"
                "(–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø—Ä–∏ —Å–∫–∏–¥–∫–µ ‚â• –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text(f"‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ ¬´{game_data['name']}¬ª")
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()
        context.user_data.pop('pending_game', None)

# –ö–æ–º–∞–Ω–¥–∞ /mysubs - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
async def my_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """SELECT game_url, game_name FROM user_games 
            WHERE user_id = %s ORDER BY subscription_date DESC""",
            (user.id,))

        if not (games := cursor.fetchall()):
            support_button = InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/bigfloppa232")
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
                reply_markup=InlineKeyboardMarkup([[support_button]]))
            return

        message = "üéÆ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        for game_url, game_name in games:
            if price_info := get_steam_game_price(extract_app_id(game_url)) if extract_app_id(game_url) else None:
                if price_info["discount"] > 0:
                    message += (
                        f" <b>{game_name}</b>\n"
                        f"   üí∞ <s>{price_info['original']} {price_info['currency']}</s> ‚Üí "
                        f"<b>{price_info['final']} {price_info['currency']}</b>\n"
                        f"   üîª–°–∫–∏–¥–∫–∞: {price_info['discount']}%\n"
                        f"   üîó URL: {game_url}\n\n")
                else:
                    message += (
                        f" <b>{game_name}</b>\n"
                        f"   üí∞ {price_info['final']} {price_info['currency']} (–±–µ–∑ —Å–∫–∏–¥–∫–∏)\n"
                        f"   üîó URL: {game_url}\n\n")
            else:
                message += f" {game_name}\n   üîó {game_url}\n\n"

        support_button = InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/bigfloppa232")
        await update.message.reply_text(
            message,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[support_button]]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        cursor.close()
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe - –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –∏–≥—Ä—ã
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_user_games(update, context, mode="unsubscribe")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–≥—Ä
async def show_user_games(update: Update, context: ContextTypes.DEFAULT_TYPE, mode="list"):
    user = update.message.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """SELECT id, game_name FROM user_games 
            WHERE user_id = %s ORDER BY subscription_date DESC""",
            (user.id,))

        if not (games := cursor.fetchall()):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        if mode == "list":
            response = "üéÆ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" + "\n".join(
                f"{idx + 1}. {name}" for idx, (_, name) in enumerate(games))
            await update.message.reply_text(response)
        elif mode == "unsubscribe":
            keyboard = [[InlineKeyboardButton(name, callback_data=f"unsub_{id}")]
                        for id, name in games]
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    finally:
        cursor.close()
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏ (callback)
async def handle_unsubscribe_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    sub_id = int(query.data.split("_")[1])
    user = query.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """DELETE FROM user_games 
            WHERE id = %s AND user_id = %s RETURNING game_name""",
            (sub_id, user.id))

        if deleted := cursor.fetchone():
            conn.commit()
            await query.edit_message_text(f"‚ùå –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç ¬´{deleted[0]}¬ª.")
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
    finally:
        cursor.close()
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /setthreshold - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ —Å–∫–∏–¥–∫–∏
async def set_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_user_games(update, context, mode="set_threshold")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ (callback)
async def handle_set_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, sub_id, threshold = query.data.split('_')

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "UPDATE user_games SET discount_threshold = %s WHERE id = %s RETURNING game_name",
            (int(threshold), int(sub_id)))
        game_name = cursor.fetchone()[0]
        conn.commit()
        await query.edit_message_text(
            f"‚úÖ –î–ª—è –∏–≥—Ä—ã ¬´{game_name}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–∫–∏–¥–∫–µ {threshold}% –∏–ª–∏ –±–æ–ª—å—à–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ä–æ–≥–∞")
    finally:
        cursor.close()
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('pending_game_url', None)
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–≥—Ä—É
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not (game_data := context.user_data.get('pending_game')):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É.")
        return

    user = update.message.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING""",
            (user.id, user.username, user.first_name, user.last_name))

        cursor.execute(
            """INSERT INTO user_games (user_id, game_url, game_name, discount_threshold)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT ON CONSTRAINT unique_user_game DO UPDATE SET game_name = EXCLUDED.game_name
            RETURNING id""",
            (user.id, game_data['url'], game_data['name'], 0))

        if result := cursor.fetchone():
            sub_id = result[0]
            conn.commit()

            keyboard = [
                [InlineKeyboardButton(f"{i}%", callback_data=f"thres_{sub_id}_{i}")]
                for i in range(10, 101, 10)]
            keyboard.append([InlineKeyboardButton("–õ—é–±–∞—è —Å–∫–∏–¥–∫–∞", callback_data=f"thres_{sub_id}_0")])

            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏ –¥–ª—è ¬´{game_data['name']}¬ª:\n"
                "(–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –ø—Ä–∏ —Å–∫–∏–¥–∫–µ ‚â• –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–õ—é–±–∞—è —Å–∫–∏–¥–∫–∞¬ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Å–µ—Ö —Å–∫–∏–¥–∫–∞—Ö",
                reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ ¬´{game_data['name']}¬ª")
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()
        context.user_data.pop('pending_game', None)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def get_handlers():
    return [
        CommandHandler("start", start),
        CommandHandler("subscribe", subscribe),
        CommandHandler("setthreshold", set_threshold),
        CommandHandler("unsubscribe", unsubscribe),
        CommandHandler("mysubs", my_subs),
        CommandHandler("cancel", cancel),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_game_url),
        CallbackQueryHandler(handle_subscription_confirmation, pattern="^(confirm_subscribe|cancel_subscribe)"),
        CallbackQueryHandler(handle_set_threshold, pattern="^thres_"),
        CallbackQueryHandler(handle_unsubscribe_button, pattern="^unsub_")
    ]